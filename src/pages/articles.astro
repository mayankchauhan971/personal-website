---
import BaseLayout from '../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';

// Get local articles only for server-side rendering
const localArticles = await getCollection('articles');

// Group local articles by category
const localArticlesByCategory = {
  tech: localArticles.filter(article => article.data.category === 'tech'),
  product: localArticles.filter(article => article.data.category === 'product'),
  personalGrowth: localArticles.filter(article => article.data.category === 'personalGrowth'),
  curiosity: localArticles.filter(article => article.data.category === 'curiosity')
};

// Calculate total counts (will be updated client-side)
const initialCounts = {
  all: localArticles.length,
  tech: localArticlesByCategory.tech.length,
  product: localArticlesByCategory.product.length,
  personalGrowth: localArticlesByCategory.personalGrowth.length,
  curiosity: localArticlesByCategory.curiosity.length
};
---

<BaseLayout title="Articles - Thoughts on Product, Tech, and Personal Growth" description="Explore my writings on product development, technology, and personal growth">
  <div class="max-w-3xl mx-auto px-6 py-16">
    <!-- Header Section -->
    <section class="mb-16">
      <h1 class="text-4xl font-bold text-gray-900 dark:text-white mb-4">Articles</h1>
      <p class="text-gray-600 dark:text-gray-400 leading-relaxed">
        Thoughts on product, technology, and personal growth.
      </p>
    </section>

    <!-- Filter Tabs -->
    <section class="mb-12">
      <div class="flex flex-wrap gap-3">
        <button 
          class="article-filter px-4 py-2 text-sm font-medium text-yellow-600 dark:text-yellow-400 border-b-2 border-yellow-600 dark:border-yellow-400"
          data-category="all"
        >
          All
        </button>
        <button 
          class="article-filter px-4 py-2 text-sm text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-colors"
          data-category="product"
        >
          Product
        </button>
        <button 
          class="article-filter px-4 py-2 text-sm text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-colors"
          data-category="tech"
        >
          Tech
        </button>
        <button 
          class="article-filter px-4 py-2 text-sm text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-colors"
          data-category="personalGrowth"
        >
          Personal Growth
        </button>
        <button 
          class="article-filter px-4 py-2 text-sm text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-colors"
          data-category="curiosity"
        >
          Curiosity
        </button>
      </div>
    </section>

    <!-- Articles List -->
    <section class="mb-16">
      <!-- Loading indicator -->
      <div id="loading-indicator" class="text-center py-8">
        <div class="text-gray-500 dark:text-gray-400 text-sm">
          Loading...
        </div>
      </div>
      
      <div class="space-y-8" id="articles-container">
        {localArticles.map(article => (
          <article 
            class={`article-card group py-6 border-b border-gray-200 dark:border-gray-700 last:border-b-0 ${article.data.category}`}
            data-category={article.data.category}
          >
            <div class="flex items-start justify-between gap-6">
              <!-- Content -->
              <div class="flex-1">
                <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-2 group-hover:text-yellow-600 dark:group-hover:text-yellow-400 transition-colors">
                  <a href={`/articles/${article.slug}`} class="block">
                    {article.data.title}
                  </a>
                </h2>
                
                <p class="text-gray-600 dark:text-gray-300 mb-3 line-clamp-2">
                  {article.data.summary}
                </p>
                
                <div class="flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400">
                  <span class={`capitalize ${
                    article.data.category === 'tech' ? 'text-blue-500' :
                    article.data.category === 'product' ? 'text-green-500' :
                    article.data.category === 'curiosity' ? 'text-orange-500' :
                    'text-purple-500'
                  }`}>
                    {article.data.category}
                  </span>
                  
                  {article.data.date && (
                    <time datetime={article.data.date}>
                      {new Date(article.data.date).toLocaleDateString('en-US', {
                        month: 'short',
                        day: 'numeric',
                        year: 'numeric'
                      })}
                    </time>
                  )}
                </div>
              </div>
              
              <!-- Read more arrow -->
              <div class="flex-shrink-0 pt-1">
                <a 
                  href={`/articles/${article.slug}`}
                  class="text-gray-400 hover:text-yellow-600 dark:hover:text-yellow-400 transition-colors"
                >
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
                  </svg>
                </a>
              </div>
            </div>
          </article>
        ))}
      </div>
      
      <!-- Empty state -->
      <div id="no-articles" class="hidden text-center py-16">
        <p class="text-gray-400">No articles found.</p>
      </div>
    </section>

  <script>
    // RSS feed integration and article filtering
    let allArticles = [];
    
    // Fetch RSS feeds from our API endpoint
    async function fetchRSSFeeds() {
      try {
        const response = await fetch('/api/rss.json');
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        return data.success ? data.articles : [];
      } catch (error) {
        console.error('Error fetching RSS feeds:', error);
        return [];
      }
    }
    
    // Create minimal article card HTML
    function createArticleCard(article) {
      const isExternal = article.external;
      const dateStr = article.date ? new Date(article.date).toLocaleDateString('en-US', {
        month: 'short',
        day: 'numeric',
        year: 'numeric'
      }) : '';
      
      return `
        <article class="article-card group py-6 border-b border-gray-200 dark:border-gray-700 last:border-b-0 ${article.category}" data-category="${article.category}">
          <div class="flex items-start justify-between gap-6">
            <!-- Content -->
            <div class="flex-1">
              <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-2 group-hover:text-yellow-600 dark:group-hover:text-yellow-400 transition-colors">
                <a href="${article.url}" ${isExternal ? 'target="_blank" rel="noopener noreferrer"' : ''} class="block">
                  ${article.title}
                </a>
              </h2>
              
              <p class="text-gray-600 dark:text-gray-300 mb-3 line-clamp-2">
                ${article.summary}
              </p>
              
              <div class="flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400">
                <span class="capitalize ${
                  article.category === 'tech' ? 'text-blue-500' :
                  article.category === 'product' ? 'text-green-500' :
                  article.category === 'curiosity' ? 'text-orange-500' :
                  'text-purple-500'
                }">
                  ${article.category}
                </span>
                
                ${dateStr ? `<time datetime="${article.date}">${dateStr}</time>` : ''}
              </div>
            </div>
            
            <!-- Read more arrow -->
            <div class="flex-shrink-0 pt-1">
              <a href="${article.url}" ${isExternal ? 'target="_blank" rel="noopener noreferrer"' : ''} class="text-gray-400 hover:text-yellow-600 dark:hover:text-yellow-400 transition-colors">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="${isExternal ? 'M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14' : 'M17 8l4 4m0 0l-4 4m4-4H3'}"></path>
                </svg>
              </a>
            </div>
          </div>
        </article>
      `;
    }
    
    // Load RSS feeds and combine with local articles
    async function loadAllArticles() {
      const loadingIndicator = document.getElementById('loading-indicator');
      
      try {
        const rssArticles = await fetchRSSFeeds();
        
        const localArticleElements = document.querySelectorAll('.article-card[data-category]');
        const localArticles = Array.from(localArticleElements).map(el => {
          const titleElement = el.querySelector('h2 a');
          const summaryElement = el.querySelector('p');
          const timeElement = el.querySelector('time');
          
          return {
            title: titleElement?.textContent || '',
            summary: summaryElement?.textContent || '',
            url: titleElement?.href || '',
            date: timeElement?.getAttribute('datetime') || '',
            category: el.getAttribute('data-category'),
            external: false,
            source: 'local'
          };
        });
        
        allArticles = [...localArticles, ...rssArticles];
        
        allArticles.sort((a, b) => {
          if (!a.date && !b.date) return 0;
          if (!a.date) return 1;
          if (!b.date) return -1;
          return new Date(b.date) - new Date(a.date);
        });
        
        renderArticles();
        
      } catch (error) {
        console.error('Error loading articles:', error);
      } finally {
        if (loadingIndicator) {
          loadingIndicator.style.display = 'none';
        }
      }
    }
    
    function renderArticles(filterCategory = 'all') {
      const container = document.getElementById('articles-container');
      if (!container) return;
      
      const filteredArticles = filterCategory === 'all' 
        ? allArticles 
        : allArticles.filter(article => article.category === filterCategory);
      
      container.innerHTML = filteredArticles.map(createArticleCard).join('');
      
      const noArticlesMessage = document.getElementById('no-articles');
      if (noArticlesMessage) {
        if (filteredArticles.length === 0) {
          noArticlesMessage.classList.remove('hidden');
        } else {
          noArticlesMessage.classList.add('hidden');
        }
      }
    }
    
    // Article filtering functionality
    document.addEventListener('DOMContentLoaded', function() {
      const filterButtons = document.querySelectorAll('.article-filter');
      
      filterButtons.forEach(button => {
        button.addEventListener('click', function() {
          const selectedCategory = this.getAttribute('data-category');
          
          // Update button states
          filterButtons.forEach(btn => {
            btn.classList.remove('text-yellow-600', 'dark:text-yellow-400', 'border-b-2', 'border-yellow-600', 'dark:border-yellow-400');
            btn.classList.add('text-gray-500', 'dark:text-gray-400');
          });
          
          this.classList.add('text-yellow-600', 'dark:text-yellow-400', 'border-b-2', 'border-yellow-600', 'dark:border-yellow-400');
          this.classList.remove('text-gray-500', 'dark:text-gray-400');
          
          renderArticles(selectedCategory);
        });
      });
      
      loadAllArticles();
    });
  </script>
</BaseLayout>
